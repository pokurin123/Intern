# -*- coding: utf-8 -*- 
"""test_xml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13MxZFAPuOqfTH3z2F7tFP2qOMN3mfGqr
"""

import xml.etree.ElementTree as ET
import numpy as np
import pandas as pd
np.set_printoptions(threshold=0)

#xmlデータを読み込みます
tree = ET.parse('map_1')
#一番上の階層の要素を取り出します
root = tree.getroot()

node_data = np.empty((0,3),dtype=float)
for child in root:
  if str(child.tag) == "node":
    detail_date = np.array([child.attrib["id"],child.attrib["lat"],child.attrib["lon"]])
    node_data = np.append(node_data,np.array([detail_date]),axis=0)

#print(node_data) #nodeをいれただけ

xml_data = np.empty((0,3),dtype=float)

for child in root:
  if str(child.tag) == "way":
    #print(child.tag)
    #print(child.attrib)

    for gchild in child:
      if gchild.tag == "nd":
        #print(gchild.tag)
        #print(gchild.attrib["ref"])
        nd_rel_id = gchild.attrib["ref"] #wayのref id
        
        for node_id in node_data:
          if node_id[0] == nd_rel_id:
            #print(node_id)
            detail_date = np.array([nd_rel_id,node_id[1],node_id[2]])
            xml_data = np.append(xml_data,np.array([detail_date]),axis=0)



#print(xml_data)

lat_min = 10000000000
lon_min = 10000000000
for xml in xml_data:
  try:
    lat = int(xml[1].replace('.', ''))
    if lat_min > lat:
      lat_min = lat
  except:
    #print(xml)
    pass
  try:
    lon = int(xml[2].replace('.', ''))
    if lon_min > lon:
      lon_min = lon
  except:
    #print(xml)
    pass
#print(lat_min)
#print(lon_min)

xml_ordered = np.empty((0,5),dtype=float)

for xml in xml_data:
    try:
      lat_base = int(xml[1].replace('.', ''))
      lat_semi = lat_base - lat_min
      x = len(str(lat_semi)) - 4
      lat_order = lat_semi / (10 ** x)
    except:
      #print(xml)
      pass
    try:
      lon_base = int(xml[2].replace('.', ''))
      lon_semi =lon_base - lon_min
      x = len(str(lon_semi)) - 4
      lon_order = lon_semi / (10 ** x)
    except:
      #print(xml)
      pass
    detail_date = np.array([xml[0],lat_order,lon_order,xml[1],xml[2]])
    xml_ordered = np.append(xml_ordered,np.array([detail_date]),axis=0)

#print(xml_ordered) #[0]way_relf [1]relf_lat [2]relf_lon

way_relf = []

for child in root:
  detail_date = []
  if str(child.tag) == "way":
    #print(child.tag)
    #print(child.attrib)

    for gchild in child:
      if gchild.tag == "nd":
        #print(gchild.tag)
        #print(gchild.attrib["ref"])
        nd_rel_id = gchild.attrib["ref"] #wayのref id
        detail_date.append(nd_rel_id)
  if len(detail_date) != 0:
    way_relf.append(detail_date)

tag_relf = []
for child in root:
  if str(child.tag) == "way":
    detail_date = []
    for gchild in child:
      if gchild.tag == "tag":
        detail_date.append(gchild.attrib["k"])
        detail_date.append(gchild.attrib["v"])
    tag_relf.append(detail_date)

create_date = []
test_num = 10
count = 0

for relf_list in way_relf:
  if count == test_num:
    #break
    pass
  detail_date = []
  for relf in relf_list:
    for relf_lat_lon in xml_ordered:
      if relf == relf_lat_lon[0]:
        detail_date.append(float(relf_lat_lon[1]))
        detail_date.append(float(relf_lat_lon[2]))
        detail_date.append(float(relf_lat_lon[3]))
        detail_date.append(float(relf_lat_lon[4]))
  create_date.append(detail_date)
  count += 1
#print(create_date)

from PIL import Image, ImageDraw
import math

def len_che(lat_0,lon_0,lat_1,lon_1):
  ra = 6378.140
  rb = 6356.755
  radian_lat_0 = np.radians(lat_0)
  radian_lon_0 = np.radians(lon_0)
  radian_lat_1 = np.radians(lat_1)
  radian_lon_1 = np.radians(lon_1)
  pla = np.arctan(rb/ra*np.tan(radian_lat_0))
  plb = np.arctan(rb/ra*np.tan(radian_lat_1))
  X = np.arccos(np.sin(pla)*np.sin(plb)+np.cos(pla)*np.cos(plb)*np.cos(radian_lon_0-radian_lon_1))
  ac1 = (np.sin(X)-X)*(np.sin(pla)+np.cos(plb))**2/np.cos(X/2)**2
  ac2 = (np.sin(X)+X)*(np.sin(pla)-np.cos(plb))**2/np.sin(X/2)**2
  F = (ra-rb)/ra
  dp = F/8*(ac1-ac2)
  len_g = ra*(X+dp)
  return len_g

def area_check(lists,list_rank):
  sums = 0
  line = 10000000
  i = 0
  for area_data in lists:
    sums += area_data
  ave = sums / len(lists)
  for area_data in lists:
    abs_dis = abs(area_data - ave)
    rank = int(abs_dis/line)
    list_rank.append([i,rank])
    #print(list_rank)
    i += 1

def area_point_re(x,y,lists,count):
  x_ord = (x/20) * 10 //1 /10
  y_ord = (x/20) * 10 //1 /10
  lists.append([count,x_ord,y_ord])

def connect_list(area_point,area_check):
  export_csv = []
  for data_0,data_1 in zip(area_point,area_check):
    box = "box" + str(data_1[1])
    export_csv.append([data_1[0],box,data_0[1],data_0[2],0,0,0,0,1,1,1])
  print(type(export_csv))
  for i in export_csv:
    print(type(i))
  import csv
  with open('new.csv', 'w') as f:
    writer = csv.writer(f,delimiter=",")
    writer.writerow(export_csv)
  with open('new.csv') as f:
    print(f.read())
    

def dimension_calc(points):
  count_area_point = 0
  area_data_num_rank = []
  area_list = []
  area_point_list = []
  end_point = 0
  end_line = 25
  max_line = 10000
  way_count = 0
  im = Image.new('RGB',(10000,10000),(128,128,128))
  draw = ImageDraw.Draw(im)
  # 座標データを元に線の描画
  for list_xy in points:
    i = 0
    count = 0
    max_len = 0
    x = []
    y = []
    re_x = []
    re_y = []
    for point in list_xy:
      if count % 4 == 0:
        x.append(point)
      elif count % 4 == 1:
        y.append(point)
      elif count % 4 == 2:
        re_x.append(point)
      elif count % 4 ==3:
        re_y.append(point)

      if len(x) == 3:
        #外れ値の削除
        le = (x[1]-x[0])**2 + (y[1]-y[0])**2
        if max_len < le:
          max_len = le//1000
        if max_len > max_line:
          continue
        draw.line((x[0],y[0],x[1],y[1]),fill='white',width=2)
        
        for tag in tag_relf[way_count]:
          if tag == "building":
            draw.line((x[0],y[0],x[1],y[1]),fill='red',width=2)
            if i == 1: 
              area_point_re(x[0],y[0],area_point_list,count_area_point)
              count_area_point += 1
              len_x = (x[1]-x[0])**2 + (y[1]-y[0])**2
            if i == 2:
              len_y = (x[1]-x[0])**2 + (y[1]-y[0])**2
            if i == 3:
              area_list.append(len_x*len_y)
            i += 1
        
        del x[0]
        del y[0]
        del re_x[0]
        del re_y[0]
      count += 1
    
    if end_point == end_line:
      break
    end_point += 1  
    way_count += 1
  area_check(area_list,area_data_num_rank)
  connect_list(area_point_list,area_data_num_rank)
  im.show()

p = create_date
dimension_calc(p)
